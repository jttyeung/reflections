When would you want to use a remote repository rather than keeping all your work local?
// It secures your files on the web in case something were to happen to your local drive; it can allow you to share and show your repository to others; and it can allow others to work on and contribute to your posted repository.

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?
// If you have multiple people working on a repository together, it could be too confusing for Git and the collaborators to have files constantly updating as work is changed on GitHub. Even if you're working on your current repository alone, you wouldn't want Git to automatically update your remote repository with auto-updates of files older than what you're currently working on.

Describe the differences between forks, clones, and branches. When would you use one instead of another?
// You'd fork if you want to copy someone else's project and make slight modifications to it and still give them credit for it. If you want to make contributions to someone's project, forking is a good idea too.
// You'd clone when you want to copy a project you're working on off GitHub that doesn't meet forking conditions above. You can also clone from within your local repositories.
// You'd branch when you are creating different versions of the same project. You can also branch when you want to work on something experimental or not ready to be shown off as a final version.

What is the benefit of having a copy of the last known state of the remote stored locally?
// You want a copy of the last known state of the remote stored locally so you can compare what changes you've made to the remote easily; you can work offline with the most recent version; and you can use it as a way to easily fetch changes from GitHub and then merge with your changes.

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?
// You'd collaborate with the use of push and pull requests. It would be easier to manage merges/merge conflicts, keep track of versioning and what changes you want or don't want, and review what changes were made to a project. It may be more difficult if you're working with several different people at once and get constant updates or multiple updates that need to be merged - in that case there's a higher likelihood of merge conflicts and it's easier to get people together in a room and discuss the pieces they want to modify first.

When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?
// Anytime you're collaborating with someone you'd want to make changes in a separate branch. When you use a separate branch the project owner(s) can moderate what changes are being made to master and only make them when code is correct/working. When you make changes directly to master, you don't have to go through the trouble of reviewing multiple changes from different sources and it's possible it may save some time and headache of merging changes since the branch-usage method requires a lot more push/pulls to preserve master.



Other:
// Remote refers to repositories. When you clone a repository a remote gets setup automatically (name of remote = origin).
// Can fork a repository to copy someone else's repository and work on it from there. Instead of: cloning the repository locally, then pushing it on GitHub. This maintains the original author's credit. GitHub keeps track of how many people have forked a repository; makes it easier for forkers to suggest changes back to the original repository creator.
// Fork from original GitHub user, then clone onto your own local drive.
// When forking a repository, after clone you want to git remote add <name of remote> of the url you forked from. Generally name forked repository remote "origin" and original remote that you are ultimately making changes to "upstream"
// Fast-forward merge: when a merge updates two file to something contained within one file's history of commits
// If collaborating and want to make a change to master you should: (1) pull origin master, (2) merge any master changes into your branch and resolve any conflicts, (3) upload the branch and do a pull request so that the master branch is left untouched until it is reviewed.


GitHub only:
// create fork
// create pull request - Be sure to review you're creating a pull request into the right forks.


Commands:
git remote |  Views and creates remotes
git remote add <name of remote> <https link to GitHub repository> |  First remote usually called 'origin'
git remote -v |  Shows verbose version of git remote. Shows both location of which you are fetching and pushing data to
git push <name of remote> <name of branch> |  Pushes data to remote on GitHub
git pull <name of remote> <name of branch> |  Pulls data from GitHub to local repository
git fetch <name of remote> |  updates local copy of remote when there are potentially conflicting changes
git pull = git fetch + git merge
git log origin/master |  shows log for the remote branch you copied from GitHub and the changes you've made sinces
git diff origin/master master |  shows differences between the remote branch you last copied from GitHub and master (local branch, same as origin/master but with any updates since)